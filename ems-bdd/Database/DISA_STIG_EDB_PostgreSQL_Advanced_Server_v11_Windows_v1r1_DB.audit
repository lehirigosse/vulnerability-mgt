#
# This script is Copyright (C) 2004-2020 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2020/10/01 $
#
# Description : This document implements the security configuration as recommended by the
#               DISA EDB Postgres Advanced Server v11 on Windows v1r1 STIG.
#
#<ui_metadata>
#<display_name>EDB PostgreSQL Advanced Server v11 DB Audit v1r1</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>EDB PostgreSQL Advanced Server v11 Windows DB</name>
#  <version>1.1.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip</link>
#</spec>
#<labels>database,disa,edb,postgresql,advanced,server</labels>
#<benchmark_refs>CAT,CCI,Rule-ID,STIG-ID,Vuln-ID</benchmark_refs>
#<variables>
#  <variable>
#    <name>PG_OWNER</name>
#    <default>enterprisedb</default>
#    <description>PostgreSQL Owner</description>
#    <info>User account that PostgreSQL system objects are owned by.</info>
#  </variable>
#  <variable>
#    <name>PG_PORTS</name>
#    <default>5432|5444</default>
#    <description>Allowable Ports</description>
#    <info>Pipe separated list of port numbers allowable for use in the environment.  Recommended to change from the default ports.</info>
#  </variable>
#  <variable>
#    <name>ADMIN_CONN_LIMIT</name>
#    <default>10</default>
#    <description>Max connections for Admins</description>
#    <info>The max number of connections for accounts with super user access.</info>
#  </variable>
#  <variable>
#    <name>USER_CONN_LIMIT</name>
#    <default>2</default>
#    <description>Max connections for Users</description>
#    <info>The max number of connections for accounts with out super user access.</info>
#  </variable>
#  <variable>
#    <name>LABELING_REQUIRED</name>
#    <default>NO</default>
#    <description>Is Security Labeling Required</description>
#    <info>Answer this as YES or NO depending on if security labeling is required.</info>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Database" db_type:"PostgreSQL" version:"1">
<group_policy:"DISA STIG EDB PostgreSQL Advanced Server v11 Windows DB audit">

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-000100 - The EDB Postgres Advanced Server must limit the number of concurrent sessions to an organization-defined number per user for all accounts and/or account types - Administrators"
  info        : "Database management includes the ability to control the number of users and user sessions utilizing a DBMS. Unlimited concurrent connections to the DBMS could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.

This requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.

The capability to limit the number of concurrent sessions per user must be configured in or added to the DBMS (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to the DBMS by other means.

The organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.

(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms.)"
  solution    : "Execute the following SQL as enterprisedb:

SELECT rolname, rolconnlimit FROM pg_roles;

For any roles where rolconnlimit is -1 or larger than the system documentation limits, execute this SQL as enterprisedb:.

ALTER USER <role> WITH CONNECTION LIMIT <desired connection limit>;"
  reference   : "800-53|AC-10,CAT|II,CCI|CCI-000054,ITSG-33|AC-10,NESA|T5.5.1,Rule-ID|SV-109391r1_rule,STIG-ID|EP11-00-000100,Vuln-ID|V-100287"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
# Note: Variable @ADMIN_CONN_LIMIT@ replaced with "10" in field "sql_request".
  sql_request : "SELECT rolname, rolconnlimit FROM pg_roles WHERE rolsuper = true AND (rolconnlimit = -1 OR rolconnlimit > 10);"
  sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
  sql_expect  : NULL, NULL
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-000100 - The EDB Postgres Advanced Server must limit the number of concurrent sessions to an organization-defined number per user for all accounts and/or account types - Users"
  info        : "Database management includes the ability to control the number of users and user sessions utilizing a DBMS. Unlimited concurrent connections to the DBMS could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.

This requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.

The capability to limit the number of concurrent sessions per user must be configured in or added to the DBMS (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to the DBMS by other means.

The organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.

(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms.)"
  solution    : "Execute the following SQL as enterprisedb:

SELECT rolname, rolconnlimit FROM pg_roles;

For any roles where rolconnlimit is -1 or larger than the system documentation limits, execute this SQL as enterprisedb:.

ALTER USER <role> WITH CONNECTION LIMIT <desired connection limit>;"
  reference   : "800-53|AC-10,CAT|II,CCI|CCI-000054,ITSG-33|AC-10,NESA|T5.5.1,Rule-ID|SV-109391r1_rule,STIG-ID|EP11-00-000100,Vuln-ID|V-100287"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
# Note: Variable @USER_CONN_LIMIT@ replaced with "2" in field "sql_request".
  sql_request : "SELECT rolname, rolconnlimit FROM pg_roles WHERE rolsuper = false AND (rolconnlimit = -1 OR rolconnlimit > 2) AND rolname NOT IN ('pg_signal_backend');"
  sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
  sql_expect  : NULL, NULL
</custom_item>

<report type:"WARNING">
  description : "EP11-00-000800 - The EDB Postgres Advanced Server must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies."
  info        : "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access the DBMS. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.

Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.

Access control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.

This requirement is applicable to access control enforcement applications, a category that includes database management systems. If the DBMS does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Use GRANT, REVOKE, ALTER statements to add and remove permissions on database objects, bringing them into line with the documented requirements.

To change authentication requirements for the database, as a user with permissions to edit the pg_hba.conf, edit the entries in the file to comply with the documented organizational authentication requirements. See the official PostgreSQL documentation for the complete list of options for authentication: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"
  reference   : "CAT|II,CCI|CCI-000213,Rule-ID|SV-109395r1_rule,STIG-ID|EP11-00-000800,Vuln-ID|V-100291"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-000900 - The EDB Postgres Advanced Server must protect against a user falsely repudiating by ensuring all accounts are individual, unique, and not shared."
  info        : "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message.

Non-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.

In designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables, and configuring the DBMS' audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, group account."
  solution    : "Use accounts assigned to individual users where feasible. Configure the DBMS to provide individual accountability at the DBMS level, and in audit logs, for actions performed under a shared database account.

Modify any applications that use a shared database account to capture individual application user identities to the audit log using the edb_audit_tag or to the data tables.

Create and enforce the use of individual user IDs for logging on to EDB Postgres tools and third-party products.

If EDB auditing is not already enabled, enable it.

Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000166,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109397r1_rule,STIG-ID|EP11-00-000900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100293"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "csv" || "xml"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001000 - The EDB Postgres Advanced Server must be configured to provide audit record generation capability for DoD-defined auditable events within all EDB Postgres Advanced Server/database components."
  info        : "Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

Audit records can be generated from various components within the DBMS (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.

DoD has defined the list of events for which the DBMS will provide an audit record generation capability as the following:

(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);

(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and

(iii) All account creation, modification, disabling, and termination actions.

Organizations may define additional events requiring continuous or ad hoc auditing."
  solution    : "Configure the DBMS's auditing to audit organization-defined auditable events.

Execute the following SQL as enterprisedb to ensure that EDB Auditing is enabled:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();

Configure EDB audit settings to audit organization-defined auditable events in accordance with the information documented in the EDB Postgres Advanced Server Guide."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000169,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109399r1_rule,STIG-ID|EP11-00-001000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100295"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "csv" || "xml"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001200 - The EDB Postgres Advanced Server must generate audit records when privileges/permissions are retrieved."
  info        : "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions.

This requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that the DBMS continually performs to determine if any and every action on the database is permitted."
  solution    : "Execute the following SQL as enterprisedb:

ALTER SYSTEM SET edb_audit_statement = 'all';
SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109403r1_rule,STIG-ID|EP11-00-001200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100299"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001300 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to retrieve privileges/permissions occur."
  info        : "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions.

This requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that the DBMS continually performs to determine if any and every action on the database is permitted.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

ALTER SYSTEM SET edb_audit_statement = 'all';
SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109405r1_rule,STIG-ID|EP11-00-001300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100301"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001400 - The EDB Postgres Advanced Server must initiate support of session auditing upon startup. - edb_audit"
  info        : "Session auditing is used when a user's activities are under investigation. To ensure all activity is captured during those periods when session auditing is in use, it must be in operation for the entire time the DBMS is running."
  solution    : "If EDB Auditing is not enabled, execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();

If the edb_audit_statement parameter values is not set to 'all' or if the current setting for this requirement has not been noted and approved by the organization in the system documentation, execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001464,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109407r1_rule,STIG-ID|EP11-00-001400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100303"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "csv" || "xml"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001400 - The EDB Postgres Advanced Server must initiate support of session auditing upon startup. - edb_audit_statement"
  info        : "Session auditing is used when a user's activities are under investigation. To ensure all activity is captured during those periods when session auditing is in use, it must be in operation for the entire time the DBMS is running."
  solution    : "If EDB Auditing is not enabled, execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();

If the edb_audit_statement parameter values is not set to 'all' or if the current setting for this requirement has not been noted and approved by the organization in the system documentation, execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001464,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109407r1_rule,STIG-ID|EP11-00-001400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100303"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001600 - The EDB Postgres Advanced Server must produce audit records containing sufficient information to establish what type of events occurred."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without establishing what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

Audit record content that may be necessary to satisfy the requirement of this policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.

Associating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type to which an audit record refers. If event type information is not recorded and stored with the audit record, the record itself is of limited use."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000130,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109409r1_rule,STIG-ID|EP11-00-001600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100305"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001700 - The EDB Postgres Advanced Server must produce audit records containing time stamps to establish when the events occurred."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.

In order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know the date and time when events occurred.

Associating the date and time with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.

Database software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly when specific actions were performed. This requires the date and time to which an audit record refers. If date and time information is not recorded and stored with the audit record, the record itself is of very limited use."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000131,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109411r1_rule,STIG-ID|EP11-00-001700,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100307"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001800 - The EDB Postgres Advanced Server must produce audit records containing sufficient information to establish where the events occurred."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without establishing where events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.

In order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know where events occurred, such as application components, modules, session identifiers, filenames, host names, and functionality.

Associating information about where the event occurred within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000132,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109413r1_rule,STIG-ID|EP11-00-001800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100309"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-001900 - The EDB Postgres Advanced Server must produce audit records containing sufficient information to establish the sources (origins) of the events."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without establishing the source of the event, it is impossible to establish, correlate, and investigate the events relating to an incident.

In order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to know where events occurred, such as application components, modules, session identifiers, filenames, host names, and functionality.

In addition to logging where events occur within the application, the application must also produce audit records that identify the application itself as the source of the event.

Associating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000133,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109415r1_rule,STIG-ID|EP11-00-001900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100311"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-002000 - The EDB Postgres Advanced Server must produce audit records containing sufficient information to establish the outcome (success or failure) of the events."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.

Event outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000134,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109417r1_rule,STIG-ID|EP11-00-002000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100313"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-002100 - The EDB Postgres Advanced Server must produce audit records containing sufficient information to establish the identity of any user/subject or process associated with the event."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.

Identifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001487,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109419r1_rule,STIG-ID|EP11-00-002100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100315"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-002200 - The EDB Postgres Advanced Server must include additional, more detailed, organization-defined information in the audit records for audit events identified by type, location, or subject."
  info        : "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.

The organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise.

Examples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of group account users.

In EnterpriseDB Postgres Plus Advanced Server, the edb_audit_tag can be used to record additional information. This tag can be set to different values by different sessions (connections), and can be set to new values any number of times. How to recognize the conditions for producing such audit data must be determined and coded for as part of application and database design.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Execute the following SQL to set additional detailed information for the audit records in the session:

 set edb_audit_tag = '<information>';

Replace <information> with a character string holding the additional data that must be captured.

To set this in a trigger, an example is included below. Keep in mind that the edb_audit_tag is set for the life of the session, not just the life of the insert command:

CREATE OR REPLACE FUNCTION add_audit_info()
RETURNS trigger AS
$BODY
$BEGIN
SET edb_audit_tag = '<information>';
RETURN NEW;
END;
$BODY
$LANGUAGE plpgsql;

CREATE TRIGGER add_audit_info_trigger
BEFORE INSERT
ON <table>
FOR EACH ROW
EXECUTE PROCEDURE add_audit_info();"
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3(1),CAT|II,CCI|CCI-000135,CN-L3|7.1.3.3(b),CSF|PR.PT-1,ITSG-33|AU-3(1),Rule-ID|SV-109421r1_rule,STIG-ID|EP11-00-002200,SWIFT-CSCv1|6.4,Vuln-ID|V-100317"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_tag;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-003210 - EDB Postgres Advanced Server software modules, to include stored procedures, functions, and triggers must be monitored to discover unauthorized changes."
  info        : "If the system were to allow any user to make changes to software modules implemented within the database, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications. Monitoring is required for assurance that the protections are effective.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Regularly run a check similar to this:

move <postgresql data directory>\latest.schema <postgresql data directory>\previous.schema

C:\Program Files\edb\as<version>\bin\pg_dump -s -d edb -f <postgresql data directory>\latest.schema

FC <postgresql data directory>\previous.schema <postgresql data directory>\latest.schema

If any differences are shown, ensure the differences are expected."
  reference   : "800-171|3.1.12,800-53|AC-17(1),CAT|II,CCI|CCI-001499,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17(1),NESA|T5.4.4,Rule-ID|SV-109441r1_rule,STIG-ID|EP11-00-003210,Vuln-ID|V-100337"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SELECT * FROM pg_stat_database;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "EP11-00-003300 - The EDB Postgres Advanced Server software installation account must be restricted to authorized users."
  info        : "When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can have significant effects on the overall security of the system.

If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed access to information system components for purposes of initiating changes, including upgrades and modifications.

DBA and other privileged administrative or application owner accounts are granted privileges that allow actions that can have a great impact on database security and operation. It is especially important to grant privileged access to only those persons who are qualified and authorized to use them.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Develop, document, and implement procedures to restrict and track use of the DBMS software installation account."
  reference   : "CAT|II,CCI|CCI-001499,Rule-ID|SV-109443r1_rule,STIG-ID|EP11-00-003300,Vuln-ID|V-100339"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-003500 - Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to the EDB Postgres Advanced Server, etc.) must be owned by database/EDB Postgres Advanced Server principals authorized for ownership."
  info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Assign ownership of authorized objects to authorized object owner accounts by running this SQL command for each object to be changed:

ALTER <type> <object name> OWNER TO <new owner>;

For example: ALTER TABLE my_table OWNER TO APP_USER;"
  reference   : "800-171|3.4.2,800-53|CM-6,CAT|II,CCI|CCI-001499,CN-L3|8.1.10.6(d),CSCv6|3.1,CSF|PR.IP-1,ITSG-33|CM-6,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-109447r1_rule,STIG-ID|EP11-00-003500,SWIFT-CSCv1|2.3,Vuln-ID|V-100343"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
# Note: Variable @PG_OWNER@ replaced with "enterprisedb" in field "sql_request".
  sql_request : "select owner, schema_name, object_name from sys.all_objects where not lower(owner) = lower('enterprisedb');"
  sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
  sql_expect  : NULL, NULL, NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-003700 - Default, demonstration and sample databases, database objects, and applications must be removed."
  info        : "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).

It is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.

DBMSs must adhere to the principles of least functionality by providing only essential capabilities.

Demonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the DBMS and host system.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Remove any unused sample databases or sample objects within a database from the DBMS.

To remove a database, execute the follow SQL:

 DROP DATABASE <database>;

To remove objects within a database, use the appropriate DROP statement (DROP TABLE, DROP VIEW, etc.)."
  reference   : "800-53|CM-2(6),CAT|II,CCI|CCI-000381,CSCv6|18.6,CSF|PR.DS-7,CSF|PR.IP-1,ITSG-33|CM-2(6),NIAv2|SS4,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,Rule-ID|SV-109451r1_rule,STIG-ID|EP11-00-003700,Vuln-ID|V-100347"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SELECT datname FROM pg_database WHERE datistemplate = false;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : NULL
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-004100 - The EDB Postgres Advanced Server must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments. - port"
  info        : "In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.

Applications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component.

To support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.

Database Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.

A Postgres database cluster (i.e., instance) listens for connections on a single TCP port. The default port for an EDB Postgres Advanced Server cluster is 5444; however, the port number that is used is configurable via the Postgres 'port' parameter. A database restart is required to apply a change to the port parameter. Also by default, a Postgres cluster will listen for connections on all interfaces on the host. The 'listen_addresses' parameter can be used to configure specific interfaces on the host to listen for connections. The default value of '*' indicates all interfaces are used. To listen only on specific interfaces, the listen_addresses parameter is configured with a comma-separated list of host names and/or numeric IP addresses corresponding to the interfaces that should be used. As with the port parameter, changes to the listen_addresses parameter requires a cluster restart to take effect."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET port = <port>;
 ALTER SYSTEM SET listen_addresses = <comma separated addresses>;

Restart the database service. For EDB Postgres Advanced Server, the default service name is 'edb-as-<EDB Version #>' with a default display name of 'edb-as-<EDB Version #> - Advanced Server <EDB Version #>':

To restart the database service, using the Windows Services Control Manager:
1. Open the Windows Services Control Manager.
2. Select the database service from the list of services, right-click it, and select 'Restart'.

Alternatively, the database can be restarted via the Windows command line using either the NET or SC command as follows:

 NET STOP <service name>
 NET START <service name>

or

 SC STOP <service name>
 SC START <service name>

Note that if pgAgent is installed and running, the corresponding pgAgent service is dependent on the EDB Postgres database service and will first need to be stopped in order to restart the database service. After restarting the database service, the pgAgent service may be started again."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CAT|II,CCI|CCI-000382,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.2|2.2.2,Rule-ID|SV-109459r1_rule,STIG-ID|EP11-00-004100,SWIFT-CSCv1|2.3,Vuln-ID|V-100355"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW port;"
  sql_types   : POLICY_VARCHAR
# Note: Variable @PG_PORTS@ replaced with "5432|5444" in field "sql_expect".
  sql_expect  : regex:"^(5432|5444)$"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-004100 - The EDB Postgres Advanced Server must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments. - address"
  info        : "In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.

Applications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component.

To support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.

Database Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.

A Postgres database cluster (i.e., instance) listens for connections on a single TCP port. The default port for an EDB Postgres Advanced Server cluster is 5444; however, the port number that is used is configurable via the Postgres 'port' parameter. A database restart is required to apply a change to the port parameter. Also by default, a Postgres cluster will listen for connections on all interfaces on the host. The 'listen_addresses' parameter can be used to configure specific interfaces on the host to listen for connections. The default value of '*' indicates all interfaces are used. To listen only on specific interfaces, the listen_addresses parameter is configured with a comma-separated list of host names and/or numeric IP addresses corresponding to the interfaces that should be used. As with the port parameter, changes to the listen_addresses parameter requires a cluster restart to take effect."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET port = <port>;
 ALTER SYSTEM SET listen_addresses = <comma separated addresses>;

Restart the database service. For EDB Postgres Advanced Server, the default service name is 'edb-as-<EDB Version #>' with a default display name of 'edb-as-<EDB Version #> - Advanced Server <EDB Version #>':

To restart the database service, using the Windows Services Control Manager:
1. Open the Windows Services Control Manager.
2. Select the database service from the list of services, right-click it, and select 'Restart'.

Alternatively, the database can be restarted via the Windows command line using either the NET or SC command as follows:

 NET STOP <service name>
 NET START <service name>

or

 SC STOP <service name>
 SC START <service name>

Note that if pgAgent is installed and running, the corresponding pgAgent service is dependent on the EDB Postgres database service and will first need to be stopped in order to restart the database service. After restarting the database service, the pgAgent service may be started again."
  reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CAT|II,CCI|CCI-000382,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.3,Rule-ID|SV-109459r1_rule,STIG-ID|EP11-00-004100,SWIFT-CSCv1|2.3,Vuln-ID|V-100355"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW listen_addresses;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : regex:"^(([1-9][0-9]{1,2}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|localhost|::1|[0-9A-Fa-f:]{4,128}),?)+$"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-004250 - If DBMS authentication, using passwords, is employed, EDB Postgres Advanced Server must enforce the DoD standards for password complexity and lifetime."
  info        : "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native DBMS authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.

The DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.

In such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For other DBMSs, the rules must be enforced using available configuration parameters or custom code.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "After creating a password verification function, configure the default profile to use it and to the other required password related settings.

To facilitate checking that a new password is sufficiently different from a previously used one, the dod_verify_password function uses the Levenshtein function, which is available as part of the PostgreSQL fuzzystrmatch extension.

Before creating the password verification function, check whether the fuzzystrmatch extension is installed by executing the following SQL query as enterprisedb:

 SELECT extname FROM pg_extension;

If 'fuzzystrmatch' is not listed, execute the following SQL to install the extension as enterprisedb:

 CREATE EXTENSION fuzzystrmatch;

With the fuzzystrmatch extension installed, execute the following SQL statements as enterprisedb:

 CREATE OR REPLACE FUNCTION sys.dod_verify_password(user_name varchar2, new_password varchar2, old_password varchar2)
 RETURN boolean IMMUTABLE
 IS
 pwd_length integer := NVL( length(new_password), 0 );

 min_length integer := 15;
 min_lower integer := 1;
 min_upper integer := 1;
 min_numeric integer := 1;
 min_special integer := 1;
 min_diff integer := ceil(min_length::numeric / 2);

 cnt_lower integer := 0;
 cnt_upper integer := 0;
 cnt_numeric integer := 0;
 cnt_special integer := 0;

 cnt_diff integer := 0;

 i integer ;
 curr_char CHAR(1);

 BEGIN

 --
 -- Check Length of new password
 --
 IF ( pwd_length < min_length )
 THEN
 raise_application_error(-20001, 'Password is too short. Password must be at least '||min_length||' characters long.');
 END IF;

 --
 -- Get count of each character type in new password.
 --
 FOR i in 1..pwd_length LOOP
 curr_char := substr(new_password, i, 1);

 IF ( curr_char SIMILAR TO '[a-z]' ) THEN
 cnt_lower := cnt_lower + 1;
 ELSIF ( curr_char SIMILAR TO '[A-Z]' ) THEN
 cnt_upper := cnt_upper + 1;
 ELSIF ( curr_char SIMILAR TO '[0-9]' ) THEN
 cnt_numeric := cnt_numeric + 1;
 ELSE
 cnt_special := cnt_special + 1;
 END IF;
 END LOOP;

 --
 -- Calculate Levenshtein difference between old and new password
 --
 cnt_diff := levenshtein( old_password, new_password );

 -- Check if new password has minimum number of lowercase characters
 IF cnt_lower < min_lower THEN
 raise_application_error(-20004, 'Password must contain at least '||min_lower||' lowercase character(s)');
 END IF;

 -- Check if new password has minimum number of uppercase characters
 IF cnt_upper < min_upper THEN
 raise_application_error(-20003, 'Password must contain at least '||min_upper||' uppercase character(s)');
 END IF;

 -- Check if new password has minimum number of numeric characters
 IF cnt_numeric < min_numeric THEN
 raise_application_error(-20005, 'Password must contain at least '||min_numeric||' numeric character(s)');
 END IF;

 -- Check if new password has minimum number of special characters
 IF cnt_special < min_special THEN
 raise_application_error(-20006, 'Password must contain at least '||min_special||' special character(s)');
 END IF;

 -- Check if new password differs from old password by minimum number of required characters
 IF cnt_diff < min_diff THEN
 raise_application_error(-20007, 'Password must differ from old password by at least '||min_diff||' character(s)');
 END IF;


 RETURN true;
 END;

 ALTER FUNCTION sys.dod_verify_password(varchar2, varchar2, varchar2) OWNER TO enterprisedb;

Next, execute the following statement (or a variant of this) to set the default profile for DoD standards:

 ALTER PROFILE DEFAULT LIMIT
 FAILED_LOGIN_ATTEMPTS 3
 PASSWORD_LOCK_TIME 1
 PASSWORD_LIFE_TIME 60
 PASSWORD_GRACE_TIME 3
 PASSWORD_REUSE_TIME 180
 PASSWORD_REUSE_MAX 5
 PASSWORD_VERIFY_FUNCTION dod_verify_password;

Note that the above statement assumes that the password verification function is named 'dod_verify_password'. If the function was created with a different name, update the ALTER PROFILE statement above as appropriate."
  reference   : "800-53|IA-5(1),CAT|II,CCI|CCI-000192,CSF|PR.AC-1,ITSG-33|IA-5(1),NESA|T5.2.3,Rule-ID|SV-109463r1_rule,STIG-ID|EP11-00-004250,SWIFT-CSCv1|4.1,Vuln-ID|V-100359"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "select * from dba_profiles;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-004300 - If passwords are used for authentication, the EDB Postgres Advanced Server must store only hashed, salted representations of passwords."
  info        : "The DoD standard for authentication is DoD-approved PKI certificates.

Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, and requires AO approval.

In such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the DBMS.

In Postgres, encrypted passwords may be generated and stored using either MD5 or SRAM-SHA-256 encryption algorithms. The Postgres password_encryption parameter identifies which algorithm is being used by the Postgres cluster (i.e., instance). In general, MD5 is not approved for use within DoD systems. However, SCRAM-SHA-256 is approved for use within the DoD."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET password_encryption = 'scram-sha-256';
 SELECT pg_reload_conf();"
  reference   : "800-171|3.5.10,800-53|IA-5(1),CAT|II,CCI|CCI-000196,CSCv6|16.13,CSCv6|16.14,CSF|PR.AC-1,ITSG-33|IA-5(1),NESA|T5.2.3,NIAv2|CY6,PCI-DSSv3.1|8.2.1,PCI-DSSv3.2|8.2.1,Rule-ID|SV-109465r1_rule,STIG-ID|EP11-00-004300,SWIFT-CSCv1|4.1,TBA-FIISB|26.1,Vuln-ID|V-100361"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW password_encryption;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "on"
</custom_item>

<report type:"WARNING">
  description : "EP11-00-004810 - Applications must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals."
  info        : "The DoD standard for authentication is DoD-approved PKI certificates.

Normally, with PKI authentication, the interaction with the user for authentication will be handled by a software component separate from the DBMS, such as ActivIdentity ActivClient. However, in cases where the DBMS controls the interaction, this requirement applies.

To prevent the compromise of authentication information such as passwords and PINs during the authentication process, the feedback from the system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.

Obfuscation of user-provided authentication secrets when typed into the system is a method used in addressing this risk.

Displaying asterisks when a user types in a password or a smart card PIN is an example of obscuring feedback of authentication secrets.

This calls for review of applications, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At minimum, the DBA must attempt to obtain assurances from the development organization the issue has been addressed, and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure or modify applications to prohibit display of passwords in clear text."
  reference   : "CAT|I,CCI|CCI-000206,Rule-ID|SV-109473r1_rule,STIG-ID|EP11-00-004810,Vuln-ID|V-100369"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-004820 - When using command-line tools such as psql, users must use a logon method that does not expose the password."
  info        : "To prevent the compromise of authentication information, such as passwords and PINs, during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.

Obfuscation of user-provided information when typed into the system is a method used in addressing this risk.

For example, displaying asterisks when a user types in a password or PIN, is an example of obscuring feedback of authentication information.

This requirement is applicable when md5-based password authentication is enabled. When this is the case, password-authenticated accounts can be created in and authenticated by EDB Postgres Advanced Server. Other STIG requirements prohibit the use of password authentication except when justified and approved. This deals with the exceptions.

The psql command line tool is part of any PostgreSQL installation. Other command-line tools may also exist. These tools can accept a plain-text password, but do offer alternative techniques. Since the typical user of these tools is a database administrator, the consequences of password compromise are particularly serious. Therefore, the use of plain-text passwords must be prohibited, as a matter of practice and procedure.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "For psql, which can accept a plain-text password, and any other essential tool with the same limitation:

1) Document the need for it, who uses it, and any relevant mitigations, and obtain AO approval.
2) Train all users of the tool in the importance of not using the plain-text password option and in how to keep the password hidden by using the '-W' option."
  reference   : "CAT|I,CCI|CCI-000206,Rule-ID|SV-109475r1_rule,STIG-ID|EP11-00-004820,Vuln-ID|V-100371"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-004900 - The EDB Postgres Advanced Server must use NIST FIPS 140-2 validated cryptographic modules for all cryptographic operations including  generation of cryptographic hashes and data protection. - version"
  info        : "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.

Applications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.

The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.

NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.

Postgres uses OpenSSL for the underlying encryption layer. Organizations must obtain and use a FIPS 140-2 certified distribution of OpenSSL or build their own FIPS 140-2 OpenSSL libraries. EnterpriseDB has a FIPS 140-2 validated set of cryptographic modules for use with OpenSSL on Windows to meet this requirement for EDB Postgres Advanced Server deployments.

It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.

When the EDB FIPS 140-2 certified cryptographic modules are configured properly, an EDB Postgres Advanced Server will fail to start if non-FIPS 140-2 ciphers are specified for the Postgres ssl_ciphers parameter. To test whether the FIPS 140-2 compliant configuration is working, temporarily set the 'ssl_ciphers' parameter in the postgresql.conf file to 'RC4-SHA' and then attempt to restart the database service. Since 'RC4-SHA' is not a FIPS 140-2 approved cipher, the database will fail to start. Using the Event Viewer in Windows, a 'FATAL: could not set the cipher list (no valid ciphers available)' error will be found under 'Event Viewer (Local) >> Windows Logs >> Application'.

Satisfies: SRG-APP-000179-DB-000114,SRG-APP-000514-DB-000382,SRG-APP-000514-DB-000383"
  solution    : "Edit <postgresql data dir>\pg_hba.conf so that each uncommented line starts with 'hostssl'

If the EDB Postgres Advanced Server minor version is less than version 11.6, install the 11.6 update or later version or contact EnterpriseDB to obtain a copy of the FIPS 140-2 compliant versions of the 'ssleay32.dll' and 'libeay32.dll' files and replace the 'ssleay32.dll' and 'libeay32.dll' files in <EDB Postgres Advanced Server Home>\bin with FIPS 140-2 compliant DLLs from EnterpriseDB. If the EDB Postgres Advanced Server minor version is 11.6 or greater, the FIPS 140-2 compliant versions of these DLLs are installed by default and do not need to be replaced.

Create C:\usr\local\ssl\openssl.cnf or another file referenced by a System Environment variable called OPENSSL_CONF with these contents:

HOME = .
RANDFILE = $ENV::HOME/.rnd
openssl_conf=openssl_conf_section
[openssl_conf_section]
alg_section=evp_settings
[evp_settings]
fips_mode=yes

Restart the Postgres server via the Services administration GUI."
  reference   : "800-171|3.14.1,800-53|SI-2,CAT|I,CCI|CCI-000803,CCI|CCI-002450,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,Rule-ID|SV-109477r1_rule,STIG-ID|EP11-00-004900,SWIFT-CSCv1|2.2,Vuln-ID|V-100373"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "select version()"
  sql_types   : POLICY_VARCHAR
  sql_expect  : regex:"^[\\s]*PostgreSQL 11\.([6-9]|[1-9][0-9])"
</custom_item>

<report type:"WARNING">
  description : "EP11-00-005000 - The DBMS must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users)."
  info        : "Non-organizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations).

Non-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.

Accordingly, a risk assessment is used in determining the authentication needs of the organization.

Scalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the Nation.

With Postgres, all database users are uniquely identified. To discriminate non-organizational users from organizational users, applications often create and utilize one or more tables to record additional information about the users, including their organizational affiliations. Another approach that may be used is to create and assign database roles corresponding to the different organizations. The EDB Postgres Advanced Server session audit log tagging feature can also be used to log additional information about the user associated with a database session such as organizational affiliation. The session audit tagging feature uses the edb_audit_tag parameter. Typically, this parameter would be set on a session by session basis via the application that connects to the EDB Postgres Advanced Server database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Ensure all logins are uniquely identifiable and authenticate all non-organizational users who log onto the system. This likely would be done via a combination of application, operating system, and EDB Postgres Advanced Server configuration settings. Verify server documentation to ensure accounts are documented and unique."
  reference   : "CAT|II,CCI|CCI-000804,Rule-ID|SV-109479r1_rule,STIG-ID|EP11-00-005000,Vuln-ID|V-100375"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-005100 - The EDB Postgres Advanced Server must separate user functionality (including user interface services) from database management functionality."
  info        : "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access.

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate.

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources.

This may include isolating the administrative interface on a different domain and with additional access controls.

If administrative functionality or information regarding DBMS management is presented on an interface available for users, information on DBMS settings may inadvertently be made available to the user.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure EDB Postgres Advanced Server to separate database administration and general user functionality.

Use the ALTER ROLE SQL command to remove 'SUPERUSER', 'CREATE Role', 'Create DB', or 'Bypass RLS' privileges from user and group roles that are not authorized for those roles.

For example:

  ALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"
  reference   : "CAT|II,CCI|CCI-001082,Rule-ID|SV-110299r1_rule,STIG-ID|EP11-00-005100,Vuln-ID|V-101195"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-005600 - In the event of a system failure, the DBMS must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes."
  info        : "Failure to a known state can address safety or security in accordance with the mission/business needs of the organization.

Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system.

Preserving information system state information helps to facilitate system restart and return to the operational mode of the organization with less disruption of mission/business processes.

Since it is usually not possible to test this capability in a production environment, systems should either be validated in a testing environment or prior to installation. This requirement is usually a function of the design of the IDPS component. Compliance can be verified by acceptance/validation processes or vendor attestation.

At all times, Postgres maintains a write ahead log (WAL) in the pg_wal/ subdirectory of the cluster's data directory. The log records every change made to the database's data files. This log exists primarily for crash-safety purposes: if the system crashes, the database can be restored to consistency by 'replaying' the log entries made since the last checkpoint. Under the covers, Postgres uses fsync system calls to help ensure that modified database information held in memory is written to disk. To support certain specialized use cases where crash recovery is not as important as system performance, Postgres provides an fsync parameter that can be set to 'off' to disable the use of fsync. By default, this parameter is set to 'on' and except for the rare use cases should not be set to 'off'.

To support being able to determine what may have caused a database failure, Postgres inherently logs failures.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To set the fsync parameter to 'on', connect to the database as a database superuser using psql and execute the following SQL commands:

 ALTER SYSTEM SET fsync = on;

 SELECT pg_reload_conf();"
  reference   : "800-171|3.3.4,800-53|AU-5,CAT|II,CCI|CCI-001665,CN-L3|7.1.3.3(e),CSF|PR.PT-1,ITSG-33|AU-5,NESA|T3.6.2,Rule-ID|SV-109481r1_rule,STIG-ID|EP11-00-005600,Vuln-ID|V-100377"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW fsync;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "on"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "EP11-00-005800 - The EDB Postgres Advanced Server must isolate security functions from non-security functions."
  info        : "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.

Security functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.

Developers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles.

Database Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Remove all application-specific packages that were added to the sys, pg_catalog, information_schema, and dbo schemas."
  reference   : "CAT|II,CCI|CCI-001084,Rule-ID|SV-109485r1_rule,STIG-ID|EP11-00-005800,Vuln-ID|V-100381"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-005900 - Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy."
  info        : "Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources.

Data used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.

Copies of sensitive data must not be misplaced or left in a temporary location without the proper controls.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy and to ensure copies of production data are not left in unsecured locations."
  reference   : "CAT|II,CCI|CCI-001090,Rule-ID|SV-109487r1_rule,STIG-ID|EP11-00-005900,Vuln-ID|V-100383"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if sqlprotect.list_protected_users table exists"
      sql_request : "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "sqlprotect", "list_protected_users"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-006200 - The EDB Postgres Advanced Server must check the validity of all data inputs except those specifically identified by the organization."
      info        : "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

Even when no such hijacking takes place, invalid input that is recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Modify database code to properly validate data before it is put into the database or acted upon by the database.

Modify the database to contain column/field definitions for each column/field in the database.

Modify the database to contain constraints and validity checking on database columns and tables that require them for data integrity.

Use prepared statements for user supplied inputs.

Do not allow general users direct console access to the EDB Postgres Advanced Server database.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109491r1_rule,STIG-ID|EP11-00-006200,Vuln-ID|V-100387"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT * FROM sqlprotect.list_protected_users;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"FAILED">
      description : "EP11-00-006200 - The EDB Postgres Advanced Server must check the validity of all data inputs except those specifically identified by the organization."
      info        : "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

Even when no such hijacking takes place, invalid input that is recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
      solution    : "Modify database code to properly validate data before it is put into the database or acted upon by the database.

Modify the database to contain column/field definitions for each column/field in the database.

Modify the database to contain constraints and validity checking on database columns and tables that require them for data integrity.

Use prepared statements for user supplied inputs.

Do not allow general users direct console access to the EDB Postgres Advanced Server database.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109491r1_rule,STIG-ID|EP11-00-006200,Vuln-ID|V-100387"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if sqlprotect.list_protected_users table exists"
      sql_request : "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "sqlprotect", "list_protected_users"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-006300 - The EDB Postgres Advanced Server and associated applications must reserve the use of dynamic code execution for situations that require it."
      info        : "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

The principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
      solution    : "Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html

 NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109493r1_rule,STIG-ID|EP11-00-006300,Vuln-ID|V-100389"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT * FROM sqlprotect.list_protected_users;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"FAILED">
      description : "EP11-00-006300 - The EDB Postgres Advanced Server and associated applications must reserve the use of dynamic code execution for situations that require it."
      info        : "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

The principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
      solution    : "Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109493r1_rule,STIG-ID|EP11-00-006300,Vuln-ID|V-100389"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if sqlprotect.list_protected_users table exists"
      sql_request : "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "sqlprotect", "list_protected_users"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-006400 - The EDB Postgres Advanced Server and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack."
      info        : "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

The principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).

When dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:
-- Allow strings as input only when necessary.
-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.
-- Limit the size of input strings to what is truly necessary.
-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.
-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */
-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.
-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.
-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, and REVOKE will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly 'Grant' (as a person's name), could also be valid input.
-- If there are range limits on the values that may be entered, enforce those limits.
-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.
-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.
-- Record the inspection and testing in the system documentation.
-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Where dynamic code execution is used, modify the code to implement protections against code injection (i.e., prepared statements).

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109495r1_rule,STIG-ID|EP11-00-006400,Vuln-ID|V-100391"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT * FROM sqlprotect.list_protected_users;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"FAILED">
      description : "EP11-00-006400 - The EDB Postgres Advanced Server and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack."
      info        : "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

The principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).

When dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:
-- Allow strings as input only when necessary.
-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.
-- Limit the size of input strings to what is truly necessary.
-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.
-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */
-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.
-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.
-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, and REVOKE will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly 'Grant' (as a person's name), could also be valid input.
-- If there are range limits on the values that may be entered, enforce those limits.
-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.
-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.
-- Record the inspection and testing in the system documentation.
-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
      solution    : "Where dynamic code execution is used, modify the code to implement protections against code injection (i.e., prepared statements).

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from possible SQL injection attacks, install and configure SQL/Protect as documented here:

 https://www.enterprisedb.com/docs/en/11.0/EPAS_Guide_v11/EDB_Postgres_Advanced_Server_Guide.1.048.html#"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109495r1_rule,STIG-ID|EP11-00-006400,Vuln-ID|V-100391"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<report type:"WARNING">
  description : "EP11-00-006500 - The EDB Postgres Advanced Server must provide non-privileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries."
  info        : "Any DBMS or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages must be carefully considered by the organization and development team.

Databases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, user names, and other system information not required for troubleshooting but very useful to someone targeting the system.

Carefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure custom database code and associated application code not to divulge sensitive information or information useful for system identification in error messages."
  reference   : "CAT|II,CCI|CCI-001312,Rule-ID|SV-109497r1_rule,STIG-ID|EP11-00-006500,Vuln-ID|V-100393"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-006600 - The EDB Postgres Advanced Server must reveal detailed error messages only to the ISSO, ISSM, SA, and DBA."
  info        : "If EDB Postgres Advanced Server provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Some default EDB Postgres Advanced Server error messages can contain information that could aid an attacker in, among others things, identifying the database type, host address, or state of the database. Custom errors may contain sensitive customer information.

It is important that detailed error messages be visible only to those who are authorized to view them; that general users receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear only when relevant to the user's task. For example, a message along the lines of, 'An error has occurred. Unable to save your changes. If this problem persists, please contact your help desk' would be relevant. A message such as 'Warning: your transaction generated a large number of page splits' would likely not be relevant.

Administrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified according to organization-specific needs, with appropriate approval.

In addition to ensuring that access to EDB Postgres Advanced Server database and audit logs is restricted to authorized users and that EDB Postgres Advanced Server is configured to emit minimal information to clients related to Postgres generated errors, custom database code and external application code should also be designed to not emit detailed error messages to a client. This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "# Set client_min_messages
To set the level of detail for errors messages exposed to clients, connect to the database as a database superuser using psql and execute the following commands:

 ALTER SYSTEM SET client_min_messages = notice;
 SELECT pg_reload_conf();

# Update EDB Postgres Advanced Server database log permissions.
If the EDB Postgres Advanced Server log_destination parameter is set to 'stderr' or 'csvlog':

1) Change ownership of EDB Postgres Advanced Server database log directory and its contents to the database service account if they are not owned by the database service account.

If the EDB Postgres Advanced Server database log directory and its contents are not owned by the database service account, change ownership to the service account responsible for running the Advanced Server database service.

This may be done using Windows Explorer:
 Browse to the directory where the log directory folder is located.
 Select and right-click on the folder, select 'Properties', select the 'Securities' tab, and select the 'Advanced' button.
 Select the 'Change' link shown next to the owner of the folder to change the folder's owner.

Alternatively, the Windows TAKEOWN command or the ICACLS command (with the /SETOWNER option) may be used to change ownership of folders and files using the Windows command prompt.

2) Modify permissions on the EDB Postgres Advanced Server database log directory and its contents to meet the requirement to protect against unauthorized access.

This may be done using Windows Explorer:
 Browse to the directory where the log directory folder is located.
 Select and right-click on the folder, select 'Properties', and select the 'Security' tab.
 Modify the security permissions to:
 NT AUTHORITY/NetworkService (or configured database service account) (Full Control)
 Administrators (Read)
 Users (none)

Alternatively, the Windows ICACLS command may be used to modify permissions on folders and files using the Windows command prompt.

If the EDB Postgres Advanced Server log_destination parameter is set to 'eventlog', update the Windows policy settings to only allow access to the Windows Application event log to authorized users.

If other permissions have been granted to other users or groups, ensure that the system documentation is updated to note the organizationally approved permission setting and corresponding justification of the permission settings for this requirement.

# Update EDB Audit log permissions.
1) Change ownership of EDB Audit directory and its contents to the database service account if they are not owned by the database service account.

If the EDB Audit directory and its contents are not owned by the database service account, change ownership to the service account responsible for running the Advanced Server database service.

This may be done using Windows Explorer:
 Browse to the directory where the EDB audit directory folder is located.
 Select and right-click on the folder, select 'Properties', select the 'Securities' tab, and select the 'Advanced' button.
 Select the 'Change' link shown next to the owner of the folder to change the folder's owner.

Alternatively, the Windows TAKEOWN command or the ICACLS command (with the /SETOWNER option) may be used to change ownership of folders and files using the Windows command prompt.

2) Modify permissions on the EDB Audit directory and its contents to meet the requirement to protect against unauthorized access.

This may be done using Windows Explorer:
 Browse to the directory where the EDB audit directory folder is located.
 Select and right-click on the folder, select 'Properties', and select the 'Security' tab.
 Modify the security permissions to:
 NT AUTHORITY/NetworkService (or configured database service account) (Full Control)
 Administrators (Read)
 Users (none)

Alternatively, the Windows ICACLS command may be used to modify permissions on folders and files using the Windows command prompt.

If other permissions have been granted to other users or groups, ensure that the system documentation is updated to note the organizationally approved permission setting and corresponding justification of the permission settings for this requirement.

# Update custom database code and application code
Configure custom database code and associated application code not to display detailed error messages to those not authorized to view them."
  reference   : "CAT|II,CCI|CCI-001314,Rule-ID|SV-109499r1_rule,STIG-ID|EP11-00-006600,Vuln-ID|V-100395"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-006700 - The EDB Postgres Advanced Server must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect."
  info        : "This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions.

Session termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated.

Conditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.

This capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Execute this SQL command in the places where the documentation requires automatic session termination:

 SELECT pg_terminate_backend(pid)
 FROM pg_stat_activity
 WHERE usename = '<username>'"
  reference   : "CAT|II,CCI|CCI-002361,Rule-ID|SV-109501r1_rule,STIG-ID|EP11-00-006700,Vuln-ID|V-100397"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if security labeling is required"
# Note: Variable @LABELING_REQUIRED@ replaced with "NO" in field "sql_request".
      sql_request : "SELECT lower('NO') as answer;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "yes"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-006900 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in storage."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row-level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements, and application code, to provide reliable security labeling of information in storage.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002262,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109503r1_rule,STIG-ID|EP11-00-006900,Vuln-ID|V-100399"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired", NULL, NULL, NULL, NULL
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "EP11-00-006900 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in storage."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row-level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements, and application code, to provide reliable security labeling of information in storage.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002262,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109503r1_rule,STIG-ID|EP11-00-006900,Vuln-ID|V-100399"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if security labeling is required"
# Note: Variable @LABELING_REQUIRED@ replaced with "NO" in field "sql_request".
      sql_request : "SELECT lower('NO') as answer;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "yes"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-007000 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in process."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in process.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002263,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109505r1_rule,STIG-ID|EP11-00-007000,Vuln-ID|V-100401"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired", NULL, NULL, NULL, NULL
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "EP11-00-007000 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in process."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in process.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002263,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109505r1_rule,STIG-ID|EP11-00-007000,Vuln-ID|V-100401"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if security labeling is required"
# Note: Variable @LABELING_REQUIRED@ replaced with "NO" in field "sql_request".
      sql_request : "SELECT lower('NO') as answer;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "yes"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-007100 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in transmission."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002264,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109507r1_rule,STIG-ID|EP11-00-007100,Vuln-ID|V-100403"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT object_owner, schema_name, object_name, policy_group, policy_name from ALL_POLICIES;"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired", NULL, NULL, NULL, NULL
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"PASSED">
      description : "EP11-00-007100 - The EDB Postgres Advanced Server must associate organization-defined types of security labels having organization-defined security label values with information in transmission."
      info        : "Without the association of security labels to information, there is no basis for EDB Postgres Advanced Server to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of EDB Postgres Advanced Server, a third-party product, or custom application code.

In addition to being able to grant privileges on tables using standard SQL features, EDB Postgres Advanced Server provides a Row Level Security (RLS) feature. This feature provides the ability to define and enable row level security policies that restrict insert, update, delete, and select access on the rows of a table on a per user basis. For deployments within the DoD, RLS policies are configured to use the assigned security labels."
      solution    : "Deploy EDB Postgres Advanced Server Row-Level Security (see link below) or a third-party software, or add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission.

https://www.enterprisedb.com/docs/en/11.0/EPAS_BIP_Guide_v11/Database_Compatibility_for_Oracle_Developers_Built-in_Package_Guide.1.31.html#pID0E0UUD0HA"
      reference   : "800-53|AC-16,CAT|II,CCI|CCI-002264,CSF|PR.AC-4,ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,Rule-ID|SV-109507r1_rule,STIG-ID|EP11-00-007100,Vuln-ID|V-100403"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<report type:"WARNING">
  description : "EP11-00-007300 - EDB Postgres Advanced Server must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects."
  info        : "Discretionary Access Control (DAC) is based on the notion that individual users are 'owners' of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.

When discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.

A subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.

The policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Implement the organization's DAC policy in the security configuration of the database and EDB Postgres Advanced Server, and, if applicable, the security configuration of the application(s) using the database.

If an unapproved user or group role is the owner of a database object, change the owner to an approved user or group role using one of the following ALTER SQL commands as appropriate:

  The syntax is:
     ALTER DATABASE <database name> OWNER TO <new_owner>
     ALTER SCHEMA <schema name> OWNER TO <new_owner>
     ALTER TABLE <table name> OWNER TO <new_owner>
     ALTER SEQUENCE <sequence name> OWNER TO <new_owner>
     ALTER VIEW <view name> OWNER TO <new_owner>
     ALTER FUNCTION <function name> (<args>) OWNER TO <new_owner>
     ALTER PROCEDURE <procedure name> (<args>) OWNER TO <new_owner>

  Examples:
     ALTER DATABASE test_db OWNER TO app_admin
     ALTER SCHEMA test_schema OWNER TO app_admin
     ALTER TABLE test_tbl OWNER TO app_admin
     ALTER SEQUENCE test_seq OWNER TO app_admin
     ALTER VIEW test_vw OWNER TO app_admin
     ALTER FUNCTION test_func (p1 numeric, p2 text) OWNER TO app_admin
     ALTER PROCEDURE test_proc (p1 numeric, p2 text) OWNER TO app_admin

If a user or group role has been granted an unapproved role or object privilege, execute the appropriate REVOKE command as documented here:

  http://www.postgresql.org/docs/current/static/sql-revoke.html"
  reference   : "CAT|II,CCI|CCI-002165,Rule-ID|SV-110301r1_rule,STIG-ID|EP11-00-007300,Vuln-ID|V-101197"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-007400 - The EDB Postgres Advanced Server must prevent non-privileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
  info        : "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.

System documentation should include a definition of the functionality considered privileged.

Depending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.

A privileged function in the DBMS/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:
CREATE
ALTER
DROP
GRANT
REVOKE

There may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:

TRUNCATE TABLE;
DELETE, or
DELETE affecting more than n rows, for some n, or
DELETE without a WHERE clause;

UPDATE or
UPDATE affecting more than n rows, for some n, or
UPDATE without a WHERE clause;

any SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.

Depending on the capabilities of the DBMS and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these.

In Postgres, a user or group role that has been granted the SUPERUSER privilege can perform any action in the database. As such, the SUPERUSER privilege should only be granted to a limited set of approved users. The SUPERUSER privilege can be assigned to a role when the role is created. It can also be assigned or removed from a role via an ALTER ROLE statement.

Postgres also provides the CREATEROLE, CREATEDB, REPLICATION, and BYPASSURLS privileges that can be granted to non-superuser roles to allow them to perform a limited set of privileged activities such as creating databases, creating user and group roles, managing replication slots, and bypassing row level security restrictions. Although not as all-encompassing as the SUPERUSER privilege, these privileges must only be granted to users who are approved to perform these activities. Like the SUPERUSER privilege, these privileges can be assigned to a role when the role is created. They can also be assigned or removed from a role via an ALTER ROLE statement. The PostgreSQL CREATE ROLE documentation provides more information about these privileges. See: https://www.postgresql.org/docs/current/sql-createrole.html

In addition to the SUPERUSER, CREATEDB, and CREATEROLE privileges, a user may be granted one or more default roles that provide access to certain privileged capabilities and activities. A listing and description of the default roles provided with Postgres is documented at the following link:

 https://www.postgresql.org/docs/current/default-roles.html

Roles and privileges on database objects can be granted to or revoked from a user using the GRANT and REVOKE statements. Users that are granted a role with the ADMIN OPTION can in turn grant the role to other users and roles. The ADMIN OPTION should only be granted to user and group roles that are approved to grant the roles. A description of the available privileges that may be granted to the different types of Postgres database objects is documented at the following link:

 https://www.postgresql.org/docs/current/ddl-priv.html

Also in Postgres, for most object types, object owners can perform any action on the objects they own, including dropping or altering them and assigning or revoking privileges on them. As such, database objects should only be owned by users who are approved to own them.

Another security risk to consider, is that Postgres can be extended with additional procedural languages that can be used to create user defined functions (i.e., not provided by EDB Postgres Advanced Server out-of-the-box). Some of these languages, such as pl/Python and pl/R are defined as 'untrusted' languages. Any users who are granted access to these untrusted languages are able to run user defined functions to escalate privileges and perform unintended functions. These languages allow a Postgres database to be extended with additional capabilities that may be of benefit to a system. However, usage of these languages should only be granted to approved users for documented and approved purposes.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Update system documentation to accurately identify all user and group roles that are authorized to perform privileged actions.

If the SUPERUSER, CREATEROLE, CREATEDB, REPLICATION, or BYPASSRLS privileges have been assigned to a user or group role that is not approved to have these privileges, remove the privilege using the ALTER ROLE SQL command as necessary.

 The syntax is:
 ALTER ROLE <role> NOSUPERUSER
 ALTER ROLE <role> NOCREATEROLE
 ALTER ROLE <role> NOCREATEDB
 ALTER ROLE <role> NOREPLICATION
 ALTER ROLE <role> NOBYPASSURLS

 Examples:
 ALTER ROLE testuser NOSUPERUSER
 ALTER ROLE testuser NOCREATEROLE
 ALTER ROLE testuser NOCREATEDB
 ALTER ROLE testuser NOREPLICATION
 ALTER ROLE testuser NOBYPASSURLS

If an unapproved user or group role is the owner of a database object, change the owner to an approved user or group role using one of the following ALTER SQL commands as appropriate:

 The syntax is:
 ALTER DATABASE <database name> OWNER TO <new_owner>
 ALTER SCHEMA <schema name> OWNER TO <new_owner>
 ALTER TABLE <table name> OWNER TO <new_owner>
 ALTER SEQUENCE <sequence name> OWNER TO <new_owner>
 ALTER VIEW <view name> OWNER TO <new_owner>
 ALTER FUNCTION <function name> (<args>) OWNER TO <new_owner>
 ALTER PROCEDURE <procedure name> (<args>) OWNER TO <new_owner>

 Examples:
 ALTER DATABASE test_db OWNER TO app_admin
 ALTER SCHEMA test_schema OWNER TO app_admin
 ALTER TABLE test_tbl OWNER TO app_admin
 ALTER SEQUENCE test_seq OWNER TO app_admin
 ALTER VIEW test_vw OWNER TO app_admin
 ALTER FUNCTION test_func (p1 numeric, p2 text) OWNER TO app_admin
 ALTER PROCEDURE test_proc (p1 numeric, p2 text) OWNER TO app_admin

If a user or group role has been granted an unapproved role or object privilege, execute the appropriate REVOKE command as documented here:

 http://www.postgresql.org/docs/current/static/sql-revoke.html

Update the system documentation to identify the intended use, scope, and justification for any 'untrusted' procedural languages that are being used for user defined functions as well as the users who are approved to use these languages and corresponding functions.

If an unapproved user defined function exists, remove it from the database by executing the DROP FUNCTION SQL command as documented here:

 https://www.postgresql.org/docs/current/sql-dropfunction.html

If an unapproved procedural language is installed, remove it from the database by executing the following SQL command:

 DROP EXTENSION <extension_name>"
  reference   : "CAT|II,CCI|CCI-002235,Rule-ID|SV-109509r1_rule,STIG-ID|EP11-00-007400,Vuln-ID|V-100405"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-007500 - Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only."
  info        : "In certain situations, to provide required functionality, a DBMS must execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.

Privilege elevation must be utilized only where necessary and protected from misuse.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Determine where, when, how, and by what principals/subjects elevated privilege is needed.

Modify the system and the application(s) using the database to ensure privilege elevation is used only as required.

To alter a function to use SECURITY INVOKER instead of SECURITY DEFINER, execute the following SQL:

ALTER FUNCTION <function()> SECURITY INVOKER;"
  reference   : "800-171|3.1.7,800-53|AC-6(10),CAT|II,CCI|CCI-002233,CSCv6|5.1,CSF|PR.AC-4,Rule-ID|SV-109511r1_rule,STIG-ID|EP11-00-007500,Vuln-ID|V-100407"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "select proname from pg_proc where prosecdef = true;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-007510 - Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only."
  info        : "In certain situations, to provide required functionality, a DBMS must execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.

Privilege elevation must be utilized only where necessary and protected from misuse.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Determine where, when, how, and by what principals/subjects elevated privilege is needed.

Modify the system and the application(s) using the database to ensure privilege elevation is used only as required.

To alter a user to not allow bypassing RLS, execute the following SQL:

ALTER USER <user> NOBYPASSRLS;"
  reference   : "800-171|3.1.7,800-53|AC-6(10),CAT|II,CCI|CCI-002233,CSCv6|5.1,CSF|PR.AC-4,Rule-ID|SV-109513r1_rule,STIG-ID|EP11-00-007510,Vuln-ID|V-100409"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "select rolname from pg_roles where rolbypassrls = true;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "ManualReviewRequired"
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "EP11-00-007700 - The EDB Postgres Advanced Server must utilize centralized management of the content captured in audit records generated by all components of the EDB Postgres Advanced Server."
  info        : "Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.

The content captured in audit records must be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records.

The DBMS may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Install a centralized log collecting tool and configure it as instructed in its documentation.

If using PEM, find the instructions at
 https://www.enterprisedb.com/docs/en/7.0/pemgetstarted/toc.html"
  reference   : "CAT|II,CCI|CCI-001844,Rule-ID|SV-109515r1_rule,STIG-ID|EP11-00-007700,Vuln-ID|V-100411"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-007800 - The EDB Postgres Advanced Server must provide centralized configuration of the content to be captured in audit records generated by all components of the EDB Postgres Advanced Server."
  info        : "If the configuration of the DBMS's auditing is spread across multiple locations in the database management software, or across multiple commands, only loosely related, it is harder to use and takes longer to reconfigure in response to events.

The DBMS must provide a unified tool for audit configuration.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "If managing multiple EDB Postgres Advanced Server clusters (i.e., instances), install a centralized audit log management tool and configure it as instructed in its documentation.

If using PEM, find the instructions at
 https://www.enterprisedb.com/docs/en/7.0/pemgetstarted/toc.html"
  reference   : "CAT|II,CCI|CCI-001844,Rule-ID|SV-109517r1_rule,STIG-ID|EP11-00-007800,Vuln-ID|V-100413"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-007900 - The EDB Postgres Advanced Server must allocate audit record storage capacity in accordance with organization-defined audit record storage requirements."
  info        : "To ensure sufficient storage capacity for the audit logs, the DBMS must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.

The task of allocating audit record storage capacity is usually performed during initial installation of the DBMS and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.

In determining the capacity requirements, consider such factors as: total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on the DBMS's ability to reuse the space formerly occupied by off-loaded records.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Allocate sufficient audit file space to the partition containing the EDB Audit directory to support peak demand.

Note that the EDB audit log directory is configured by the edb_audit_directory parameter. By default, the edb_audit_directory is set to 'edb_audit', which results in an 'edb_audit' directory being created under the EPAS cluster's data directory for audit logs if auditing is enabled."
  reference   : "CAT|II,CCI|CCI-001849,Rule-ID|SV-109519r1_rule,STIG-ID|EP11-00-007900,Vuln-ID|V-100415"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "EP11-00-008100 - The EDB Postgres Advanced Server must provide an immediate real-time alert to appropriate support staff of all audit failure events requiring real-time alerts."
  info        : "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability, and system operation may be adversely affected.

The appropriate support staff include, at a minimum, the ISSO and the DBA/SA.

Alerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the time from event detection to alert occurs in seconds or less).

The necessary monitoring and alerts may be implemented using features of EDB Postgres, the OS, third-party software, custom code, or a combination of these. The term 'the system' is used to encompass all of these.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Install PEM (or similar tool) and configure a probe to monitor '<postgresql data directory>' and notify appropriate support staff upon storage volume utilization reaching capacity.

(The default path for the postgresql data directory is C:\Program Files\edb\as<version>\data, but this will vary according to local circumstances.)

Example steps for creating a probe are below, using the thin client (browser) PEM interface. Refer also to the Supplemental Procedures document, supplied with this STIG.

Open the PEM web console in a browser.
- Log in.
- Click on the agent for the machine to be monitored.
- Select 'Management | Probe Configuration'.
- Select 'Disk Space' and set the check interval as you like.
- Select 'Management | Alerting'.
- Name the definition 'Audit Log Full'.
- Select Template 'Disk Consumption Percentage'.
- Set Frequency, Comparison Operator, and Thresholds (1 minute, >, 90/95/98 for example).
- Enter the Location for the audit log.
- Click Notification tab.
- Click Email all alerts.
- Click Add/Change to save, click 'OK' to exit dialog box."
  reference   : "CAT|II,CCI|CCI-001858,Rule-ID|SV-109523r1_rule,STIG-ID|EP11-00-008100,Vuln-ID|V-100419"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-008600 - The EDB Postgres Advanced Server must produce audit records of its enforcement of access restrictions associated with changes to the configuration of the EDB Postgres Advanced Server or database(s)."
  info        : "Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions.

Enforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-001814,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109529r1_rule,STIG-ID|EP11-00-008600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100425"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<report type:"WARNING">
  description : "EP11-00-008800 - The EDB Postgres Advanced Server must require users to re-authenticate when organization-defined circumstances or situations require re-authentication."
  info        : "The DoD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever re-authentication is required.

Without re-authentication, users may access resources or perform tasks for which they do not have authorization.

When applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user re-authenticate.

In addition to the re-authentication requirements associated with session locks, organizations may require re-authentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:

(i) When authenticators change;
(ii) When roles change;
(iii) When security categories of information systems change;
(iv) When the execution of privileged functions occurs;
(v) After a fixed period of time; or
(vi) Periodically.

Within the DoD, the minimum circumstances requiring re-authentication are privilege escalation and role changes.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Determine the organization-defined circumstances or situations that require re-authentication and ensure the following SQL is executed in those situations.

To require a single user to re-authenticate, use this SQL:

 SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user = '<username>';

To require all users to re-authenticate, use this SQL:

 SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%';"
  reference   : "CAT|II,CCI|CCI-002038,Rule-ID|SV-109533r1_rule,STIG-ID|EP11-00-008800,Vuln-ID|V-100429"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "Check if sqlprotect.list_protected_users table exists"
      sql_request : "SELECT table_schema, table_name FROM information_schema.tables WHERE lower(table_schema) = 'sqlprotect' and lower(table_name) = 'list_protected_users';"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "sqlprotect", "list_protected_users"
    </custom_item>
  </condition>

  <then>
    <custom_item>
      type        : SQL_POLICY
      description : "EP11-00-009700 - When invalid inputs are received, the EDB Postgres Advanced Server must behave in a predictable and documented manner that reflects organizational and system objectives."
      info        : "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.

The behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Revise and deploy the source code for database program objects (stored procedures, functions, triggers) and application source code, to implement the documented behavior.

To enable EDB Auditing, execute the following SQL statements as the enterprisedb user:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();

To configure the edb_audit_statement parameter, execute the following SQL statements as the enterprisedb user:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

 Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from unexpected or unauthorized actions performed on database tables, install and configure SQL/Protect as documented in section 'Protecting Against SQL Injection Attacks' in the EDB Postgres Advanced Server Guide available at the following link:

https://www.enterprisedb.com/edb-docs/p/edb-postgres-advanced-server"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-002754,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109545r1_rule,STIG-ID|EP11-00-009700,Vuln-ID|V-100441"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
      sql_request : "SELECT * FROM sqlprotect.list_protected_users;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"FAILED">
      description : "EP11-00-009700 - When invalid inputs are received, the EDB Postgres Advanced Server must behave in a predictable and documented manner that reflects organizational and system objectives."
      info        : "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.

The behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered."
      solution    : "Revise and deploy the source code for database program objects (stored procedures, functions, triggers) and application source code, to implement the documented behavior.

To enable EDB Auditing, execute the following SQL statements as the enterprisedb user:

 ALTER SYSTEM SET edb_audit = csv;
 SELECT pg_reload_conf();

or

 ALTER SYSTEM SET edb_audit = xml;
 SELECT pg_reload_conf();

To configure the edb_audit_statement parameter, execute the following SQL statements as the enterprisedb user:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

 Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement.

If EDB SQL/Protect is being used to monitor and protect the EDB Postgres Advanced Server database from unexpected or unauthorized actions performed on database tables, install and configure SQL/Protect as documented in section 'Protecting Against SQL Injection Attacks' in the EDB Postgres Advanced Server Guide available at the following link:

https://www.enterprisedb.com/edb-docs/p/edb-postgres-advanced-server"
      reference   : "800-53|SI-10,CAT|II,CCI|CCI-002754,CN-L3|8.1.4.4(d),ITSG-33|SI-10,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-109545r1_rule,STIG-ID|EP11-00-009700,Vuln-ID|V-100441"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
    </report>
  </else>
</if>

<report type:"WARNING">
  description : "EP11-00-009900 - Security-relevant software updates to the EDB Postgres Advanced Server must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
  info        : "Security flaws with software applications, including database management systems, are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.

Organization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).

This requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality, will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means the time period utilized must be a configurable parameter. Timeframes for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.

The application will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Institute and adhere to policies and procedures to ensure that patches are consistently obtained from EnterpriseDB and applied to the DBMS within the time allowed.

Ensure that a monitored email address is registered as a user on the EDB support portal and is receiving technical alerts."
  reference   : "CAT|II,CCI|CCI-002605,Rule-ID|SV-109547r1_rule,STIG-ID|EP11-00-009900,Vuln-ID|V-100443"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010000 - The EDB Postgres Advanced Server must generate audit records when security objects are accessed."
  info        : "Changes to the security configuration must be tracked.

This requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.

In a SQL environment, types of access include, but are not necessarily limited to:
SELECT
INSERT
UPDATE
DELETE
EXECUTE"
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109549r1_rule,STIG-ID|EP11-00-010000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100445"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010100 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to access security objects occur."
  info        : "Changes to the security configuration must be tracked.

This requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.

In a SQL environment, types of access include, but are not necessarily limited to:
SELECT
INSERT
UPDATE
DELETE
EXECUTE

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109551r1_rule,STIG-ID|EP11-00-010100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100447"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010200 - The DBMS must generate audit records when categories of information (e.g., classification levels/security levels) are accessed."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109553r1_rule,STIG-ID|EP11-00-010200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100449"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010300 - Audit records must be generated when unsuccessful attempts to access categorized information (e.g., classification levels/security levels) occur."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109555r1_rule,STIG-ID|EP11-00-010300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100451"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010400 - The EDB Postgres Advanced Server must generate audit records when privileges/permissions are added."
  info        : "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of individual and group privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.

In a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE command."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109557r1_rule,STIG-ID|EP11-00-010400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100453"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010500 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to add privileges/permissions occur."
  info        : "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict individual and group privileges could go undetected.

In a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE command.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109559r1_rule,STIG-ID|EP11-00-010500,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100455"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010800 - The EDB Postgres Advanced Server must generate audit records when security objects are modified."
  info        : "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109565r1_rule,STIG-ID|EP11-00-010800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100461"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010900 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to modify security objects occur."
  info        : "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109567r1_rule,STIG-ID|EP11-00-010900,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100463"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011000 - Audit records must be generated when categorized information (e.g., classification levels/security levels) is created."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109569r1_rule,STIG-ID|EP11-00-011000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100465"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011050 - Audit records must be generated when categorized information (e.g., classification levels/security levels) is modified."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109571r1_rule,STIG-ID|EP11-00-011050,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100467"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011100 - Audit records must be generated when unsuccessful attempts to create categorized information (e.g., classification levels/security levels) occur."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109573r1_rule,STIG-ID|EP11-00-011100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100469"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011150 - Audit records must be generated when unsuccessful attempts to modify categorized information (e.g., classification levels/security levels) occur."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109575r1_rule,STIG-ID|EP11-00-011150,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100471"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011200 - The EDB Postgres Advanced Server must generate audit records when privileges/permissions are deleted."
  info        : "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of individual and group privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.

In a SQL environment, deleting permissions is typically done via the REVOKE command."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109577r1_rule,STIG-ID|EP11-00-011200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100473"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011300 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to delete privileges/permissions occur."
  info        : "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict individual and group privileges could go undetected.

In a SQL environment, deleting permissions is typically done via the REVOKE command.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109579r1_rule,STIG-ID|EP11-00-011300,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100475"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011400 - The EDB Postgres Advanced Server must generate audit records when security objects are deleted."
  info        : "The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109581r1_rule,STIG-ID|EP11-00-011400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100477"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011500 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to delete security objects occur."
  info        : "The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109583r1_rule,STIG-ID|EP11-00-011500,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100479"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011600 - Audit records must be generated when categorized information (e.g., classification levels/security levels) is deleted."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109585r1_rule,STIG-ID|EP11-00-011600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100481"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011700 - Audit records must be generated when unsuccessful attempts to delete categorized information (e.g., classification levels/security levels) occur."
  info        : "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.

For detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109587r1_rule,STIG-ID|EP11-00-011700,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100483"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-011800 - The EDB Postgres Advanced Server must generate audit records when successful/unsuccessful logons, connections, or connection attempts occur."
  info        : "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to the DBMS.

It is also necessary to track failed attempts to log on to the DBMS. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.

Satisfies: SRG-APP-000503-DB-000350,SRG-APP-000503-DB-000351"
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_connect = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109589r1_rule,STIG-ID|EP11-00-011800,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100485"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_connect;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012000 - The EDB Postgres Advanced Server must generate audit records for all privileged activities or other system-level access."
  info        : "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

System documentation should include a definition of the functionality considered privileged.

A privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In a SQL environment, it encompasses, but is not necessarily limited to:
CREATE
ALTER
DROP
GRANT
REVOKE

There may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:

TRUNCATE TABLE;
DELETE, or
DELETE affecting more than n rows, for some n, or
DELETE without a WHERE clause;

UPDATE or
UPDATE affecting more than n rows, for some n, or
UPDATE without a WHERE clause;

any SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.

Depending on the capabilities of the DBMS and the design of the database and associated applications, audit logging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination of these.

Note that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109593r1_rule,STIG-ID|EP11-00-012000,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100489"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012100 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to execute privileged activities or other system-level access occur."
  info        : "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

System documentation should include a definition of the functionality considered privileged.

A privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:
CREATE
ALTER
DROP
GRANT
REVOKE

Note that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109595r1_rule,STIG-ID|EP11-00-012100,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100491"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012200 - The EDB Postgres Advanced Server must generate audit records showing starting and ending time for user access to the database(s) and concurrent logons/connections by the same user from different workstations."
  info        : "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to the DBMS lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs.

Disconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.

Concurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.

(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events [logons/connections; voluntary and involuntary disconnections], then it is not mandatory to create additional log entries specifically for this.)

Satisfies: SRG-APP-000505-DB-000352,SRG-APP-000506-DB-000353"
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_connect = 'all';
 ALTER SYSTEM SET edb_audit_disconnect = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109597r1_rule,STIG-ID|EP11-00-012200,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100493"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_connect;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012400 - The EDB Postgres Advanced Server must be able to generate audit records when successful accesses to objects occur."
  info        : "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.

In an SQL environment, types of access include, but are not necessarily limited to:
SELECT
INSERT
UPDATE
DELETE
EXECUTE"
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109601r1_rule,STIG-ID|EP11-00-012400,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100497"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012500 - The EDB Postgres Advanced Server must generate audit records when unsuccessful accesses to objects occur."
  info        : "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.

In a SQL environment, types of access include, but are not necessarily limited to:
SELECT
INSERT
UPDATE
DELETE
EXECUTE

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109603r1_rule,STIG-ID|EP11-00-012500,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100499"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012600 - The EDB Postgres Advanced Server must generate audit records for all direct access to the database(s). - edb_audit_statement"
  info        : "In this context, direct access is any query, command, or call to the DBMS that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and non-standard sources."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 ALTER SYSTEM SET edb_audit_connect = 'all';
 ALTER SYSTEM SET edb_audit_disconnect = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109605r1_rule,STIG-ID|EP11-00-012600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100501"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012600 - The EDB Postgres Advanced Server must generate audit records for all direct access to the database(s). - edb_audit_connect"
  info        : "In this context, direct access is any query, command, or call to the DBMS that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and non-standard sources."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 ALTER SYSTEM SET edb_audit_connect = 'all';
 ALTER SYSTEM SET edb_audit_disconnect = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109605r1_rule,STIG-ID|EP11-00-012600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100501"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_connect;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-012600 - The EDB Postgres Advanced Server must generate audit records for all direct access to the database(s). - edb_audit_disconnect"
  info        : "In this context, direct access is any query, command, or call to the DBMS that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and non-standard sources."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 ALTER SYSTEM SET edb_audit_connect = 'all';
 ALTER SYSTEM SET edb_audit_disconnect = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109605r1_rule,STIG-ID|EP11-00-012600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100501"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_disconnect;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<report type:"WARNING">
  description : "EP11-00-013000 - The EDB Postgres Advanced Server must off-load audit data to a separate log management facility; this must be continuous and in near real time for systems with a network connection to the storage facility and weekly or more often for stand-alone systems."
  info        : "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.

Off-loading is a common process in information systems with limited audit storage capacity.

The DBMS may write audit records to database tables, to files in the file system, to other kinds of local repositories, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Install a centralized log-collecting tool and configure it as instructed in its documentation.

If using PEM, find the instructions for configuring the centralized audit manager at:
 https://www.enterprisedb.com/docs/en/7.0/pemgetstarted/toc.html"
  reference   : "CAT|II,CCI|CCI-001851,Rule-ID|SV-109613r1_rule,STIG-ID|EP11-00-013000,Vuln-ID|V-100509"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010600 - The EDB Postgres Advanced Server must generate audit records when privileges/permissions are modified."
  info        : "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.

In a SQL environment, modifying permissions is typically done via the GRANT and REVOKE commands."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109561r1_rule,STIG-ID|EP11-00-010600,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100457"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "EP11-00-010700 - The EDB Postgres Advanced Server must generate audit records when unsuccessful attempts to modify privileges/permissions occur."
  info        : "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.

In a SQL environment, modifying permissions is typically done via the GRANT and REVOKE commands.

To aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones."
  solution    : "Execute the following SQL as enterprisedb:

 ALTER SYSTEM SET edb_audit_statement = 'all';
 SELECT pg_reload_conf();

or

Update the system documentation to note the organizationally approved setting and corresponding justification of the setting for this requirement."
  reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CAT|II,CCI|CCI-000172,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,Rule-ID|SV-109563r1_rule,STIG-ID|EP11-00-010700,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1,Vuln-ID|V-100459"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
  sql_request : "SHOW edb_audit_statement;"
  sql_types   : POLICY_VARCHAR
  sql_expect  : "all"
</custom_item>

<report type:"WARNING">
  description : "EP11-00-013100 - The EDB Postgres Advanced Server must be configured in accordance with the security configuration settings based on DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs."
  info        : "Configuring the DBMS to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements.

In addition to this SRG, sources of guidance on security and information assurance exist. These include NSA configuration guides, CTOs, DTMs, and IAVMs. The DBMS must be configured in compliance with guidance from all such relevant sources.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure EDB Postgres Advanced Server in accordance with DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs, and IAVMs."
  reference   : "CAT|II,CCI|CCI-000366,Rule-ID|SV-109615r1_rule,STIG-ID|EP11-00-013100,Vuln-ID|V-100511"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_EDB_PGS_Advanced_Server_v11_Windows_V1R1_STIG.zip"
</report>

</group_policy>
</check_type>
